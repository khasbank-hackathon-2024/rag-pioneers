import streamlit as st
from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
from tts import ttsservice
from gemini_chain import invoke_gemini
from llama_chain import invoke_llama
# Load multilingual pretrained model
tokenizer = AutoTokenizer.from_pretrained("bert-base-multilingual-cased")
model = AutoModelForSequenceClassification.from_pretrained("bert-base-multilingual-cased")
nlp = pipeline("text-classification", model=model, tokenizer=tokenizer)

# Function to process chatbot response
def chatbot_response(user_input):
    # Use NLP pipeline to classify input
    intent = nlp(user_input)
    label = intent[0]["label"]
    score = intent[0]["score"]

    # Example chatbot responses
    if label == "LABEL_0":
        return f"–≠–µ—Ä—ç–≥ —É—Ç–≥–∞ –∏–ª—ç—Ä—Å—ç–Ω –±–∞–π–Ω–∞! –ò—Ç–≥—ç–º–∂–ª—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: **{score:.2f}**."
    elif label == "LABEL_1":
        return f"–°”©—Ä”©–≥ —É—Ç–≥–∞ –∏–ª—ç—Ä—Å—ç–Ω –±–∞–π–Ω–∞. –ò—Ç–≥—ç–º–∂–ª—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: **{score:.2f}**."
    else:
        return "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ –æ–π–ª–≥–æ—Å–æ–Ω–≥“Ø–π. –ò–ª“Ø“Ø —Ç–æ–¥–æ—Ä—Ö–æ–π –∞—Å—É—É–ª—Ç –∞—Å—É—É–≥–∞–∞—Ä–∞–π."

# Streamlit app layout
st.set_page_config(
    page_title="KHas Bank AI Chatbot",
    page_icon="üí¨",
    layout="wide",
)

# Custom CSS for Styling
st.markdown("""
    <style>
        body {
            background-color: #1e1e1e;
            color: #fff;
            font-family: 'Arial', sans-serif;
        }
        .stTextInput>div>div>input {
            background-color: #444;
            color: #fff;
        }
        .stButton>button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 24px;
            font-size: 16px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
        }
        .stButton>button:hover {
            background-color: #45a049;
        }
        .chat-message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 8px;
            background-color: #333;
            max-width: 70%;
            margin-left: auto;
            margin-right: auto;
            color: white;
        }
        .user-message {
            background-color: #4CAF50;
        }
        .bot-message {
            background-color: #555;
        }
        .footer {
            text-align: center;
            font-size: 14px;
            color: #777;
        }
    </style>
""", unsafe_allow_html=True)

# Sidebar to show conversation history
if 'history' not in st.session_state:
    st.session_state['history'] = []

# Add conversation history to the sidebar
st.sidebar.title("üí¨ Chat History")
st.sidebar.write("–¢–∞–Ω—ã ”©–º–Ω”©—Ö —á–∞—Ç:")
for message in st.session_state['history']:
    st.sidebar.markdown(f"- **{message['role']}**: {message['text']}")

# Sidebar
st.sidebar.title("üíª Chatbot Settings")
st.sidebar.write("–¢–æ—Ö–∏—Ä–≥–æ–æ –±–æ–ª–æ–Ω –º—ç–¥—ç—ç–ª–ª“Ø“Ø–¥:")
st.sidebar.markdown(
    """
    - **–ú–æ–¥–µ–ª**: `bert-base-multilingual-cased`
    - **–¢–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω**: –ó—ç—ç–ª–∏–π–Ω –∞—Å—É—É–ª—Ç, —ç–µ—Ä—ç–≥/—Å”©—Ä”©–≥ —É—Ç–≥–∞ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö.
    """
)

# Main UI
st.title("üí¨ KHas Bank AI Chatbot")
st.subheader("–¢–∞–Ω–¥ —è–º–∞—Ä —Ç—É—Å–ª–∞–º–∂ —Ö—ç—Ä—ç–≥—Ç—ç–π –±–∞–π–Ω–∞?")
st.write("–ë–∏–¥ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω!")

# User input
with st.form(key="chat_form"):
    user_input = st.text_input("üí¨ –•—ç—Ä—ç–≥–ª—ç–≥—á:", placeholder="–≠–Ω–¥ —Ç–∞–Ω—ã –º–µ—Å—Å–µ–∂–∏–π–≥ –±–∏—á–Ω—ç “Ø“Ø...")
    submit_button = st.form_submit_button(label="–ê—Å—É—É—Ö")

# Add conversation history and display chat
if submit_button and user_input:
    response = chatbot_response(user_input)
    if 'gemini' in user_input:
        user_input = user_input.replace('gemini', '')
        response = invoke_gemini(user_input)
    else:
        response =  invoke_llama(user_input)
        
    content = response['messages'][-1].content
    resp_audio = ttsservice(content)
    audio_html = f"""
    <audio hidden autoplay>
        <source src="data:audio/mp3;base64,{resp_audio}" type="audio/mp3">
        Your browser does not support the audio element.
    </audio>
    """
    st.markdown(audio_html, unsafe_allow_html=True)
    
    # Add user message and bot response to the history
    st.session_state['history'].append({'role': '–•—ç—Ä—ç–≥–ª—ç–≥—á', 'text': user_input})
    st.session_state['history'].append({'role': '–ë–æ—Ç', 'text': content})

    # Display chat messages on the main page
    st.markdown(f'<div class="chat-message user-message">üí¨ {user_input}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="chat-message bot-message">ü§ñ {content}</div>', unsafe_allow_html=True)

# Footer
st.markdown("""
    <div class="footer">
        ü§ñ **AI Chatbot** ¬© 2024. KHas Bank–≤ .
    </div>
""", unsafe_allow_html=True)
